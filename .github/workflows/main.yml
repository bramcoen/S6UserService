on:
  push:
    branches:
      - main
jobs:
#Review - Code analyses
  review:
    name: Review
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"bramcoen_S6UserService" /o:"bramcoen" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build --configuration Release
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  build:
    needs: review
    name: Build, test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
#Build C#
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore

#Run unit tests
    
    - name: Test
      run: dotnet test --no-restore --verbosity normal
#Deploy Docker repository
  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images:  ${{ secrets.Image_Name }}
    - name: Set outputs
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      
    - name: Check outputs
      run: echo ${{ steps.vars.outputs.sha_short }}

    - name: Log into registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
       username: ${{ secrets.DOCKER_USERNAME }}
       password: ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Build and push Docker images
      uses: docker/build-push-action@v3.0.0
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ secrets.Image_Name }}:${{ steps.vars.outputs.sha_short }}, ${{ secrets.Image_Name }}:latest
        labels: ${{ steps.meta.outputs.labels }}

#Deploy Install doctl
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Save DigitalOcean kubeconfig with short-lived credentials
      run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.DIGITALOCEAN_CLUSTER }}

#Deploy secrets
    - name: Create Secret userservicesecret
      run: kubectl delete secret userservicesecret
      continue-on-error: true
      
    - name: Create Secret userservicesecret
      run: kubectl create secret generic userservicesecret --from-literal=EmailToken=${{ secrets.EmailToken }} --from-literal=RabbitMQUsername=${{ secrets.RabbitMQUsername }} --from-literal=RabbitMQPassword=${{ secrets.RabbitMQPassword }} --from-literal=GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} --from-literal=RabbitMQHostname=${{ secrets.RabbitMQHostname }} --from-literal=MongoDBConnectionString=${{ secrets.MongoDBConnectionString }}
   

#Deploy app
    - name: Deploy to DigitalOcean Kubernetes
      run: kubectl apply -f $GITHUB_WORKSPACE/deployment
      
    - name: Restart pods in deployment
      run: kubectl rollout restart deploy ${{ secrets.Kubernetes_Deployment }}
